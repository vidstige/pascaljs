/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	var parser = __webpack_require__(2)
	var emitter = __webpack_require__(3);

	function run(pascal_source, output_id) {
	  try {
	    var object_code = "";
	    var raw_emit = function (line) {
	        object_code += line + "\n";
	    };

	    var ast = parser.parse(pascal_source);
	    var e = new emitter.Emitter(raw_emit);
	    e.emit(ast);

	    // TODO: Special variant of WriteLn that does not write to console.log
	    var original = console.log;
	    var output = "";    
	    console.log = function (line) {
	        output += line;
	    }

	    // Run js object code
	    eval(object_code);

	    console.log = original;

	    document.getElementById(output_id).innerHTML = output;
	  } catch (e) {
	    if (e instanceof(parser.SyntaxError)) {
	      // specific error
	        document.getElementById(output_id).innerHTML = e.message;
	        console.error(e);
	    } else {
	      throw e;
	    }
	  }
	}

	window.demo = { run: run }


/***/ }),
/* 2 */
/***/ (function(module, exports) {

	/*
	 * Generated by PEG.js 0.10.0.
	 *
	 * http://pegjs.org/
	 */

	"use strict";

	function peg$subclass(child, parent) {
	  function ctor() { this.constructor = child; }
	  ctor.prototype = parent.prototype;
	  child.prototype = new ctor();
	}

	function peg$SyntaxError(message, expected, found, location) {
	  this.message  = message;
	  this.expected = expected;
	  this.found    = found;
	  this.location = location;
	  this.name     = "SyntaxError";

	  if (typeof Error.captureStackTrace === "function") {
	    Error.captureStackTrace(this, peg$SyntaxError);
	  }
	}

	peg$subclass(peg$SyntaxError, Error);

	peg$SyntaxError.buildMessage = function(expected, found) {
	  var DESCRIBE_EXPECTATION_FNS = {
	        literal: function(expectation) {
	          return "\"" + literalEscape(expectation.text) + "\"";
	        },

	        "class": function(expectation) {
	          var escapedParts = "",
	              i;

	          for (i = 0; i < expectation.parts.length; i++) {
	            escapedParts += expectation.parts[i] instanceof Array
	              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
	              : classEscape(expectation.parts[i]);
	          }

	          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
	        },

	        any: function(expectation) {
	          return "any character";
	        },

	        end: function(expectation) {
	          return "end of input";
	        },

	        other: function(expectation) {
	          return expectation.description;
	        }
	      };

	  function hex(ch) {
	    return ch.charCodeAt(0).toString(16).toUpperCase();
	  }

	  function literalEscape(s) {
	    return s
	      .replace(/\\/g, '\\\\')
	      .replace(/"/g,  '\\"')
	      .replace(/\0/g, '\\0')
	      .replace(/\t/g, '\\t')
	      .replace(/\n/g, '\\n')
	      .replace(/\r/g, '\\r')
	      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
	      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
	  }

	  function classEscape(s) {
	    return s
	      .replace(/\\/g, '\\\\')
	      .replace(/\]/g, '\\]')
	      .replace(/\^/g, '\\^')
	      .replace(/-/g,  '\\-')
	      .replace(/\0/g, '\\0')
	      .replace(/\t/g, '\\t')
	      .replace(/\n/g, '\\n')
	      .replace(/\r/g, '\\r')
	      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
	      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
	  }

	  function describeExpectation(expectation) {
	    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
	  }

	  function describeExpected(expected) {
	    var descriptions = new Array(expected.length),
	        i, j;

	    for (i = 0; i < expected.length; i++) {
	      descriptions[i] = describeExpectation(expected[i]);
	    }

	    descriptions.sort();

	    if (descriptions.length > 0) {
	      for (i = 1, j = 1; i < descriptions.length; i++) {
	        if (descriptions[i - 1] !== descriptions[i]) {
	          descriptions[j] = descriptions[i];
	          j++;
	        }
	      }
	      descriptions.length = j;
	    }

	    switch (descriptions.length) {
	      case 1:
	        return descriptions[0];

	      case 2:
	        return descriptions[0] + " or " + descriptions[1];

	      default:
	        return descriptions.slice(0, -1).join(", ")
	          + ", or "
	          + descriptions[descriptions.length - 1];
	    }
	  }

	  function describeFound(found) {
	    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
	  }

	  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
	};

	function peg$parse(input, options) {
	  options = options !== void 0 ? options : {};

	  var peg$FAILED = {},

	      peg$startRuleFunctions = { start: peg$parsestart },
	      peg$startRuleFunction  = peg$parsestart,

	      peg$c0 = "program",
	      peg$c1 = peg$literalExpectation("program", false),
	      peg$c2 = ";",
	      peg$c3 = peg$literalExpectation(";", false),
	      peg$c4 = ".",
	      peg$c5 = peg$literalExpectation(".", false),
	      peg$c6 = function(name, root) { return {'program': root, 'name': name}; },
	      peg$c7 = "unit",
	      peg$c8 = peg$literalExpectation("unit", false),
	      peg$c9 = "interface",
	      peg$c10 = peg$literalExpectation("interface", false),
	      peg$c11 = "implementation",
	      peg$c12 = peg$literalExpectation("implementation", false),
	      peg$c13 = "end",
	      peg$c14 = peg$literalExpectation("end", false),
	      peg$c15 = function(name, the_interface, the_implementation) { return {'unit': {'interface': the_interface, 'implementation': the_implementation}, 'name': name}; },
	      peg$c16 = "begin",
	      peg$c17 = peg$literalExpectation("begin", false),
	      peg$c18 = function(d, s) { return {'declarations': d, 'statements': s}; },
	      peg$c19 = function(all) { return nth(all, 0); },
	      peg$c20 = "procedure",
	      peg$c21 = peg$literalExpectation("procedure", false),
	      peg$c22 = "(",
	      peg$c23 = peg$literalExpectation("(", false),
	      peg$c24 = ")",
	      peg$c25 = peg$literalExpectation(")", false),
	      peg$c26 = function(name, args) { return {'name': name, 'args': args}; },
	      peg$c27 = function(head, block) { return {'procedure': head.name, 'arguments': head.args, 'block': block, 'ret': false}; },
	      peg$c28 = "function",
	      peg$c29 = peg$literalExpectation("function", false),
	      peg$c30 = ":",
	      peg$c31 = peg$literalExpectation(":", false),
	      peg$c32 = function(name, args, return_type) { return {'name': name, 'args': args, 'return_type': return_type}; },
	      peg$c33 = function(head, block) { return {'function': head.name, 'arguments': head.args, 'block': block, 'return_type': head.return_type}; },
	      peg$c34 = function(first, rest) { return flatten((first ? [first] : []).concat(nth(rest, 2))); },
	      peg$c35 = ",",
	      peg$c36 = peg$literalExpectation(",", false),
	      peg$c37 = function(first, rest, t) { return [{'name': first, 'type': t}].concat(rest.map(function (r) { return {'name': r[2], 'type': t}; })); },
	      peg$c38 = "type",
	      peg$c39 = peg$literalExpectation("type", false),
	      peg$c40 = function(types) { return {'types': types}; },
	      peg$c41 = "=",
	      peg$c42 = peg$literalExpectation("=", false),
	      peg$c43 = function(alias, the_type) { createAlias(alias, the_type); return {'alias': alias, 'type': the_type}; },
	      peg$c44 = "const",
	      peg$c45 = peg$literalExpectation("const", false),
	      peg$c46 = function(constants) { return {'constants': constants}; },
	      peg$c47 = function(constant_name, value) { return {'name':constant_name, 'value': value}; },
	      peg$c48 = "var",
	      peg$c49 = peg$literalExpectation("var", false),
	      peg$c50 = function(vars) { return {'vars': vars}; },
	      peg$c51 = function(variable_name, type) { return {'name': variable_name, 'type': type}; },
	      peg$c52 = peg$otherExpectation("type"),
	      peg$c53 = "array",
	      peg$c54 = peg$literalExpectation("array", false),
	      peg$c55 = "[",
	      peg$c56 = peg$literalExpectation("[", false),
	      peg$c57 = "..",
	      peg$c58 = peg$literalExpectation("..", false),
	      peg$c59 = "]",
	      peg$c60 = peg$literalExpectation("]", false),
	      peg$c61 = "of",
	      peg$c62 = peg$literalExpectation("of", false),
	      peg$c63 = function(low, high, of) { return {'kind': 'array', 'range': {'low': low, 'high': high}, 'of': of}; },
	      peg$c64 = "record",
	      peg$c65 = peg$literalExpectation("record", false),
	      peg$c66 = function(members) { return {'kind': 'record', 'members': members}; },
	      peg$c67 = "^",
	      peg$c68 = peg$literalExpectation("^", false),
	      peg$c69 = function(to) { return {'kind': 'pointer', 'to': to}},
	      peg$c70 = function(type_name) { return findType(type_name); },
	      peg$c71 = function(stmts) { return {'statement': 'compound', 'statements': stmts}; },
	      peg$c72 = ":=",
	      peg$c73 = peg$literalExpectation(":=", false),
	      peg$c74 = function(lvalue, value) { return {'statement': 'assignment', 'to': lvalue, 'from': value}; },
	      peg$c75 = function(variable, indexer) { return {'variable': variable, 'indexer': indexer}; },
	      peg$c76 = function(variable, member) { return {'variable': variable, 'member': member}; },
	      peg$c77 = function(variable) { return {'variable': variable}; },
	      peg$c78 = function(procedure, args) { return {'statement': 'call', 'target': procedure, 'arguments': args}; },
	      peg$c79 = function(first, rest) { return [first].concat(nth(rest, 2)); },
	      peg$c80 = "if",
	      peg$c81 = peg$literalExpectation("if", false),
	      peg$c82 = "then",
	      peg$c83 = peg$literalExpectation("then", false),
	      peg$c84 = "else",
	      peg$c85 = peg$literalExpectation("else", false),
	      peg$c86 = function(e, stmt1, stmt2) { return {'statement': 'if', 'condition': e, 'then': stmt1, 'else': stmt2}; },
	      peg$c87 = "for",
	      peg$c88 = peg$literalExpectation("for", false),
	      peg$c89 = "to",
	      peg$c90 = peg$literalExpectation("to", false),
	      peg$c91 = "downto",
	      peg$c92 = peg$literalExpectation("downto", false),
	      peg$c93 = "do",
	      peg$c94 = peg$literalExpectation("do", false),
	      peg$c95 = function(variable, start, direction, stop, stmt) { return {'statement': 'for', 'variable': variable, 'start': start, 'stop': stop, 'direction': direction, 'do': stmt }; },
	      peg$c96 = "while",
	      peg$c97 = peg$literalExpectation("while", false),
	      peg$c98 = function(condition, stmt) { return {'statement': 'while', 'condition': condition, 'do': stmt }; },
	      peg$c99 = peg$otherExpectation("function call"),
	      peg$c100 = function(func, args) { return func + '(' + args + ')'; },
	      peg$c101 = peg$otherExpectation("expression"),
	      peg$c102 = function(a, b) { return [a, '==', b].join(''); },
	      peg$c103 = "<>",
	      peg$c104 = peg$literalExpectation("<>", false),
	      peg$c105 = function(a, b) { return [a, '!=', b].join(''); },
	      peg$c106 = ">=",
	      peg$c107 = peg$literalExpectation(">=", false),
	      peg$c108 = function(a, b) { return [a, '>=', b].join(''); },
	      peg$c109 = "<=",
	      peg$c110 = peg$literalExpectation("<=", false),
	      peg$c111 = function(a, b) { return [a, '<=', b].join(''); },
	      peg$c112 = ">",
	      peg$c113 = peg$literalExpectation(">", false),
	      peg$c114 = function(a, b) { return [a, '>', b].join(''); },
	      peg$c115 = "<",
	      peg$c116 = peg$literalExpectation("<", false),
	      peg$c117 = function(a, b) { return [a, '<', b].join(''); },
	      peg$c118 = "or",
	      peg$c119 = peg$literalExpectation("or", false),
	      peg$c120 = "+",
	      peg$c121 = peg$literalExpectation("+", false),
	      peg$c122 = "-",
	      peg$c123 = peg$literalExpectation("-", false),
	      peg$c124 = function(first, rest) { return buildList(first, rest, 3,  1, {'or': '||'}); },
	      peg$c125 = "and",
	      peg$c126 = peg$literalExpectation("and", false),
	      peg$c127 = "*",
	      peg$c128 = peg$literalExpectation("*", false),
	      peg$c129 = "/",
	      peg$c130 = peg$literalExpectation("/", false),
	      peg$c131 = "div",
	      peg$c132 = peg$literalExpectation("div", false),
	      peg$c133 = "mod",
	      peg$c134 = peg$literalExpectation("mod", false),
	      peg$c135 = function(first, rest) { return buildList(first, rest, 3,  1, {'and': '&&', 'div': '/', 'mod': '%'}); },
	      peg$c136 = function() { return text(); },
	      peg$c137 = "@",
	      peg$c138 = peg$literalExpectation("@", false),
	      peg$c139 = function(v) { return JSON.stringify({'pointer': v}); },
	      peg$c140 = function(ptr) { return "eval(" + ptr + "['pointer']" + ")"; },
	      peg$c141 = peg$otherExpectation("variable"),
	      peg$c142 = peg$otherExpectation("identifier"),
	      peg$c143 = /^[A-Za-z]/,
	      peg$c144 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false),
	      peg$c145 = /^[A-Za-z0-9]/,
	      peg$c146 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"]], false, false),
	      peg$c147 = peg$otherExpectation("literal"),
	      peg$c148 = "'",
	      peg$c149 = peg$literalExpectation("'", false),
	      peg$c150 = peg$anyExpectation(),
	      peg$c151 = "true",
	      peg$c152 = peg$literalExpectation("true", false),
	      peg$c153 = "false",
	      peg$c154 = peg$literalExpectation("false", false),
	      peg$c155 = /^[0-9]/,
	      peg$c156 = peg$classExpectation([["0", "9"]], false, false),
	      peg$c157 = function() { return text; },
	      peg$c158 = "{",
	      peg$c159 = peg$literalExpectation("{", false),
	      peg$c160 = "}",
	      peg$c161 = peg$literalExpectation("}", false),
	      peg$c162 = peg$otherExpectation("whitespace"),
	      peg$c163 = /^[ \t\n\r]/,
	      peg$c164 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
	      peg$c165 = function() { return null; },

	      peg$currPos          = 0,
	      peg$savedPos         = 0,
	      peg$posDetailsCache  = [{ line: 1, column: 1 }],
	      peg$maxFailPos       = 0,
	      peg$maxFailExpected  = [],
	      peg$silentFails      = 0,

	      peg$result;

	  if ("startRule" in options) {
	    if (!(options.startRule in peg$startRuleFunctions)) {
	      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
	    }

	    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
	  }

	  function text() {
	    return input.substring(peg$savedPos, peg$currPos);
	  }

	  function location() {
	    return peg$computeLocation(peg$savedPos, peg$currPos);
	  }

	  function expected(description, location) {
	    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

	    throw peg$buildStructuredError(
	      [peg$otherExpectation(description)],
	      input.substring(peg$savedPos, peg$currPos),
	      location
	    );
	  }

	  function error(message, location) {
	    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

	    throw peg$buildSimpleError(message, location);
	  }

	  function peg$literalExpectation(text, ignoreCase) {
	    return { type: "literal", text: text, ignoreCase: ignoreCase };
	  }

	  function peg$classExpectation(parts, inverted, ignoreCase) {
	    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
	  }

	  function peg$anyExpectation() {
	    return { type: "any" };
	  }

	  function peg$endExpectation() {
	    return { type: "end" };
	  }

	  function peg$otherExpectation(description) {
	    return { type: "other", description: description };
	  }

	  function peg$computePosDetails(pos) {
	    var details = peg$posDetailsCache[pos], p;

	    if (details) {
	      return details;
	    } else {
	      p = pos - 1;
	      while (!peg$posDetailsCache[p]) {
	        p--;
	      }

	      details = peg$posDetailsCache[p];
	      details = {
	        line:   details.line,
	        column: details.column
	      };

	      while (p < pos) {
	        if (input.charCodeAt(p) === 10) {
	          details.line++;
	          details.column = 1;
	        } else {
	          details.column++;
	        }

	        p++;
	      }

	      peg$posDetailsCache[pos] = details;
	      return details;
	    }
	  }

	  function peg$computeLocation(startPos, endPos) {
	    var startPosDetails = peg$computePosDetails(startPos),
	        endPosDetails   = peg$computePosDetails(endPos);

	    return {
	      start: {
	        offset: startPos,
	        line:   startPosDetails.line,
	        column: startPosDetails.column
	      },
	      end: {
	        offset: endPos,
	        line:   endPosDetails.line,
	        column: endPosDetails.column
	      }
	    };
	  }

	  function peg$fail(expected) {
	    if (peg$currPos < peg$maxFailPos) { return; }

	    if (peg$currPos > peg$maxFailPos) {
	      peg$maxFailPos = peg$currPos;
	      peg$maxFailExpected = [];
	    }

	    peg$maxFailExpected.push(expected);
	  }

	  function peg$buildSimpleError(message, location) {
	    return new peg$SyntaxError(message, null, null, location);
	  }

	  function peg$buildStructuredError(expected, found, location) {
	    return new peg$SyntaxError(
	      peg$SyntaxError.buildMessage(expected, found),
	      expected,
	      found,
	      location
	    );
	  }

	  function peg$parsestart() {
	    var s0;

	    s0 = peg$parseprogram();
	    if (s0 === peg$FAILED) {
	      s0 = peg$parseunit();
	    }

	    return s0;
	  }

	  function peg$parseprogram() {
	    var s0, s1, s2, s3, s4, s5, s6, s7;

	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 7) === peg$c0) {
	      s1 = peg$c0;
	      peg$currPos += 7;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c1); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseidentifier();
	        if (s3 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 59) {
	            s4 = peg$c2;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c3); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parse_();
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parseblock();
	              if (s6 !== peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 46) {
	                  s7 = peg$c4;
	                  peg$currPos++;
	                } else {
	                  s7 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
	                }
	                if (s7 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c6(s3, s6);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parseunit() {
	    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 4) === peg$c7) {
	      s1 = peg$c7;
	      peg$currPos += 4;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c8); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseidentifier();
	        if (s3 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 59) {
	            s4 = peg$c2;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c3); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parse_();
	            if (s5 !== peg$FAILED) {
	              if (input.substr(peg$currPos, 9) === peg$c9) {
	                s6 = peg$c9;
	                peg$currPos += 9;
	              } else {
	                s6 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c10); }
	              }
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parse_();
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parseinterface_part();
	                  if (s8 !== peg$FAILED) {
	                    s9 = peg$parse_();
	                    if (s9 !== peg$FAILED) {
	                      if (input.substr(peg$currPos, 14) === peg$c11) {
	                        s10 = peg$c11;
	                        peg$currPos += 14;
	                      } else {
	                        s10 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c12); }
	                      }
	                      if (s10 !== peg$FAILED) {
	                        s11 = peg$parse_();
	                        if (s11 !== peg$FAILED) {
	                          s12 = peg$parsedeclarations();
	                          if (s12 !== peg$FAILED) {
	                            s13 = peg$parse_();
	                            if (s13 !== peg$FAILED) {
	                              if (input.substr(peg$currPos, 3) === peg$c13) {
	                                s14 = peg$c13;
	                                peg$currPos += 3;
	                              } else {
	                                s14 = peg$FAILED;
	                                if (peg$silentFails === 0) { peg$fail(peg$c14); }
	                              }
	                              if (s14 !== peg$FAILED) {
	                                if (input.charCodeAt(peg$currPos) === 46) {
	                                  s15 = peg$c4;
	                                  peg$currPos++;
	                                } else {
	                                  s15 = peg$FAILED;
	                                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
	                                }
	                                if (s15 !== peg$FAILED) {
	                                  peg$savedPos = s0;
	                                  s1 = peg$c15(s3, s8, s12);
	                                  s0 = s1;
	                                } else {
	                                  peg$currPos = s0;
	                                  s0 = peg$FAILED;
	                                }
	                              } else {
	                                peg$currPos = s0;
	                                s0 = peg$FAILED;
	                              }
	                            } else {
	                              peg$currPos = s0;
	                              s0 = peg$FAILED;
	                            }
	                          } else {
	                            peg$currPos = s0;
	                            s0 = peg$FAILED;
	                          }
	                        } else {
	                          peg$currPos = s0;
	                          s0 = peg$FAILED;
	                        }
	                      } else {
	                        peg$currPos = s0;
	                        s0 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parseblock() {
	    var s0, s1, s2, s3, s4, s5, s6;

	    s0 = peg$currPos;
	    s1 = peg$parsedeclarations();
	    if (s1 !== peg$FAILED) {
	      if (input.substr(peg$currPos, 5) === peg$c16) {
	        s2 = peg$c16;
	        peg$currPos += 5;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c17); }
	      }
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parse_();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parsestatements();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parse_();
	            if (s5 !== peg$FAILED) {
	              if (input.substr(peg$currPos, 3) === peg$c13) {
	                s6 = peg$c13;
	                peg$currPos += 3;
	              } else {
	                s6 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c14); }
	              }
	              if (s6 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c18(s1, s4);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsestatements() {
	    var s0, s1, s2, s3, s4, s5;

	    s0 = peg$currPos;
	    s1 = [];
	    s2 = peg$currPos;
	    s3 = peg$parsestatement();
	    if (s3 !== peg$FAILED) {
	      if (input.charCodeAt(peg$currPos) === 59) {
	        s4 = peg$c2;
	        peg$currPos++;
	      } else {
	        s4 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c3); }
	      }
	      if (s4 !== peg$FAILED) {
	        s5 = peg$parse_();
	        if (s5 !== peg$FAILED) {
	          s3 = [s3, s4, s5];
	          s2 = s3;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s2;
	        s2 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s2;
	      s2 = peg$FAILED;
	    }
	    while (s2 !== peg$FAILED) {
	      s1.push(s2);
	      s2 = peg$currPos;
	      s3 = peg$parsestatement();
	      if (s3 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 59) {
	          s4 = peg$c2;
	          peg$currPos++;
	        } else {
	          s4 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c3); }
	        }
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parse_();
	          if (s5 !== peg$FAILED) {
	            s3 = [s3, s4, s5];
	            s2 = s3;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s2;
	        s2 = peg$FAILED;
	      }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c19(s1);
	    }
	    s0 = s1;

	    return s0;
	  }

	  function peg$parsedeclarations() {
	    var s0, s1;

	    s0 = [];
	    s1 = peg$parsedeclaration_part();
	    while (s1 !== peg$FAILED) {
	      s0.push(s1);
	      s1 = peg$parsedeclaration_part();
	    }

	    return s0;
	  }

	  function peg$parsedeclaration_part() {
	    var s0;

	    s0 = peg$parsetypes();
	    if (s0 === peg$FAILED) {
	      s0 = peg$parseconstants();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsevars();
	        if (s0 === peg$FAILED) {
	          s0 = peg$parseprocedure_declaration();
	          if (s0 === peg$FAILED) {
	            s0 = peg$parsefunction_declaration();
	          }
	        }
	      }
	    }

	    return s0;
	  }

	  function peg$parseinterface_part() {
	    var s0, s1;

	    s0 = [];
	    s1 = peg$parsetypes();
	    if (s1 === peg$FAILED) {
	      s1 = peg$parseconstants();
	      if (s1 === peg$FAILED) {
	        s1 = peg$parsevars();
	        if (s1 === peg$FAILED) {
	          s1 = peg$parseprocedure_header();
	          if (s1 === peg$FAILED) {
	            s1 = peg$parsefunction_header();
	          }
	        }
	      }
	    }
	    while (s1 !== peg$FAILED) {
	      s0.push(s1);
	      s1 = peg$parsetypes();
	      if (s1 === peg$FAILED) {
	        s1 = peg$parseconstants();
	        if (s1 === peg$FAILED) {
	          s1 = peg$parsevars();
	          if (s1 === peg$FAILED) {
	            s1 = peg$parseprocedure_header();
	            if (s1 === peg$FAILED) {
	              s1 = peg$parsefunction_header();
	            }
	          }
	        }
	      }
	    }

	    return s0;
	  }

	  function peg$parseprocedure_header() {
	    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 9) === peg$c20) {
	      s1 = peg$c20;
	      peg$currPos += 9;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c21); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseidentifier();
	        if (s3 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 40) {
	            s4 = peg$c22;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c23); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseargument_list_declaration();
	            if (s5 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 41) {
	                s6 = peg$c24;
	                peg$currPos++;
	              } else {
	                s6 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c25); }
	              }
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parse_();
	                if (s7 !== peg$FAILED) {
	                  if (input.charCodeAt(peg$currPos) === 59) {
	                    s8 = peg$c2;
	                    peg$currPos++;
	                  } else {
	                    s8 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c3); }
	                  }
	                  if (s8 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c26(s3, s5);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parseprocedure_declaration() {
	    var s0, s1, s2, s3, s4, s5;

	    s0 = peg$currPos;
	    s1 = peg$parseprocedure_header();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseblock();
	        if (s3 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 59) {
	            s4 = peg$c2;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c3); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parse_();
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c27(s1, s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsefunction_header() {
	    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 8) === peg$c28) {
	      s1 = peg$c28;
	      peg$currPos += 8;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c29); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseidentifier();
	        if (s3 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 40) {
	            s4 = peg$c22;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c23); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseargument_list_declaration();
	            if (s5 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 41) {
	                s6 = peg$c24;
	                peg$currPos++;
	              } else {
	                s6 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c25); }
	              }
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parse_();
	                if (s7 !== peg$FAILED) {
	                  if (input.charCodeAt(peg$currPos) === 58) {
	                    s8 = peg$c30;
	                    peg$currPos++;
	                  } else {
	                    s8 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c31); }
	                  }
	                  if (s8 !== peg$FAILED) {
	                    s9 = peg$parse_();
	                    if (s9 !== peg$FAILED) {
	                      s10 = peg$parsetype();
	                      if (s10 !== peg$FAILED) {
	                        if (input.charCodeAt(peg$currPos) === 59) {
	                          s11 = peg$c2;
	                          peg$currPos++;
	                        } else {
	                          s11 = peg$FAILED;
	                          if (peg$silentFails === 0) { peg$fail(peg$c3); }
	                        }
	                        if (s11 !== peg$FAILED) {
	                          peg$savedPos = s0;
	                          s1 = peg$c32(s3, s5, s10);
	                          s0 = s1;
	                        } else {
	                          peg$currPos = s0;
	                          s0 = peg$FAILED;
	                        }
	                      } else {
	                        peg$currPos = s0;
	                        s0 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsefunction_declaration() {
	    var s0, s1, s2, s3, s4, s5;

	    s0 = peg$currPos;
	    s1 = peg$parsefunction_header();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseblock();
	        if (s3 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 59) {
	            s4 = peg$c2;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c3); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parse_();
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c33(s1, s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parseargument_list_declaration() {
	    var s0, s1, s2, s3, s4, s5, s6;

	    s0 = peg$currPos;
	    s1 = peg$parseargument_declaration();
	    if (s1 === peg$FAILED) {
	      s1 = null;
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = [];
	      s3 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 59) {
	        s4 = peg$c2;
	        peg$currPos++;
	      } else {
	        s4 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c3); }
	      }
	      if (s4 !== peg$FAILED) {
	        s5 = peg$parse_();
	        if (s5 !== peg$FAILED) {
	          s6 = peg$parseargument_declaration();
	          if (s6 !== peg$FAILED) {
	            s4 = [s4, s5, s6];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s3;
	        s3 = peg$FAILED;
	      }
	      while (s3 !== peg$FAILED) {
	        s2.push(s3);
	        s3 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 59) {
	          s4 = peg$c2;
	          peg$currPos++;
	        } else {
	          s4 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c3); }
	        }
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parse_();
	          if (s5 !== peg$FAILED) {
	            s6 = peg$parseargument_declaration();
	            if (s6 !== peg$FAILED) {
	              s4 = [s4, s5, s6];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	      }
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c34(s1, s2);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parseargument_declaration() {
	    var s0, s1, s2, s3, s4, s5, s6;

	    s0 = peg$currPos;
	    s1 = peg$parseidentifier();
	    if (s1 !== peg$FAILED) {
	      s2 = [];
	      s3 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 44) {
	        s4 = peg$c35;
	        peg$currPos++;
	      } else {
	        s4 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c36); }
	      }
	      if (s4 !== peg$FAILED) {
	        s5 = peg$parse_();
	        if (s5 !== peg$FAILED) {
	          s6 = peg$parseidentifier();
	          if (s6 !== peg$FAILED) {
	            s4 = [s4, s5, s6];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s3;
	        s3 = peg$FAILED;
	      }
	      while (s3 !== peg$FAILED) {
	        s2.push(s3);
	        s3 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 44) {
	          s4 = peg$c35;
	          peg$currPos++;
	        } else {
	          s4 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c36); }
	        }
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parse_();
	          if (s5 !== peg$FAILED) {
	            s6 = peg$parseidentifier();
	            if (s6 !== peg$FAILED) {
	              s4 = [s4, s5, s6];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	      }
	      if (s2 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 58) {
	          s3 = peg$c30;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c31); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parsetype();
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c37(s1, s2, s5);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsetypes() {
	    var s0, s1, s2, s3, s4;

	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 4) === peg$c38) {
	      s1 = peg$c38;
	      peg$currPos += 4;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c39); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = [];
	        s4 = peg$parsetype_declaration();
	        if (s4 !== peg$FAILED) {
	          while (s4 !== peg$FAILED) {
	            s3.push(s4);
	            s4 = peg$parsetype_declaration();
	          }
	        } else {
	          s3 = peg$FAILED;
	        }
	        if (s3 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c40(s3);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsetype_declaration() {
	    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	    s0 = peg$currPos;
	    s1 = peg$parseidentifier();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 61) {
	          s3 = peg$c41;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c42); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parsetype();
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parse_();
	              if (s6 !== peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 59) {
	                  s7 = peg$c2;
	                  peg$currPos++;
	                } else {
	                  s7 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c3); }
	                }
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parse_();
	                  if (s8 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c43(s1, s5);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parseconstants() {
	    var s0, s1, s2, s3, s4;

	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 5) === peg$c44) {
	      s1 = peg$c44;
	      peg$currPos += 5;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c45); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = [];
	        s4 = peg$parseconstant();
	        if (s4 !== peg$FAILED) {
	          while (s4 !== peg$FAILED) {
	            s3.push(s4);
	            s4 = peg$parseconstant();
	          }
	        } else {
	          s3 = peg$FAILED;
	        }
	        if (s3 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c46(s3);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parseconstant() {
	    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	    s0 = peg$currPos;
	    s1 = peg$parseidentifier();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 61) {
	          s3 = peg$c41;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c42); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseliteral();
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parse_();
	              if (s6 !== peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 59) {
	                  s7 = peg$c2;
	                  peg$currPos++;
	                } else {
	                  s7 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c3); }
	                }
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parse_();
	                  if (s8 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c47(s1, s5);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsevars() {
	    var s0, s1, s2, s3, s4;

	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 3) === peg$c48) {
	      s1 = peg$c48;
	      peg$currPos += 3;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c49); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = [];
	        s4 = peg$parsevar();
	        if (s4 !== peg$FAILED) {
	          while (s4 !== peg$FAILED) {
	            s3.push(s4);
	            s4 = peg$parsevar();
	          }
	        } else {
	          s3 = peg$FAILED;
	        }
	        if (s3 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c50(s3);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsevar() {
	    var s0, s1, s2, s3, s4, s5, s6;

	    s0 = peg$currPos;
	    s1 = peg$parseidentifier();
	    if (s1 !== peg$FAILED) {
	      if (input.charCodeAt(peg$currPos) === 58) {
	        s2 = peg$c30;
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c31); }
	      }
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parse_();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parsetype();
	          if (s4 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 59) {
	              s5 = peg$c2;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c3); }
	            }
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parse_();
	              if (s6 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c51(s1, s4);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsetype() {
	    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 5) === peg$c53) {
	      s1 = peg$c53;
	      peg$currPos += 5;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c54); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 91) {
	          s3 = peg$c55;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c56); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parseinteger_literal();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parse_();
	            if (s5 !== peg$FAILED) {
	              if (input.substr(peg$currPos, 2) === peg$c57) {
	                s6 = peg$c57;
	                peg$currPos += 2;
	              } else {
	                s6 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c58); }
	              }
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parse_();
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parseinteger_literal();
	                  if (s8 !== peg$FAILED) {
	                    s9 = peg$parse_();
	                    if (s9 !== peg$FAILED) {
	                      if (input.charCodeAt(peg$currPos) === 93) {
	                        s10 = peg$c59;
	                        peg$currPos++;
	                      } else {
	                        s10 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c60); }
	                      }
	                      if (s10 !== peg$FAILED) {
	                        s11 = peg$parse_();
	                        if (s11 !== peg$FAILED) {
	                          if (input.substr(peg$currPos, 2) === peg$c61) {
	                            s12 = peg$c61;
	                            peg$currPos += 2;
	                          } else {
	                            s12 = peg$FAILED;
	                            if (peg$silentFails === 0) { peg$fail(peg$c62); }
	                          }
	                          if (s12 !== peg$FAILED) {
	                            s13 = peg$parse_();
	                            if (s13 !== peg$FAILED) {
	                              s14 = peg$parsetype();
	                              if (s14 !== peg$FAILED) {
	                                peg$savedPos = s0;
	                                s1 = peg$c63(s4, s8, s14);
	                                s0 = s1;
	                              } else {
	                                peg$currPos = s0;
	                                s0 = peg$FAILED;
	                              }
	                            } else {
	                              peg$currPos = s0;
	                              s0 = peg$FAILED;
	                            }
	                          } else {
	                            peg$currPos = s0;
	                            s0 = peg$FAILED;
	                          }
	                        } else {
	                          peg$currPos = s0;
	                          s0 = peg$FAILED;
	                        }
	                      } else {
	                        peg$currPos = s0;
	                        s0 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 6) === peg$c64) {
	        s1 = peg$c64;
	        peg$currPos += 6;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c65); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseargument_list_declaration();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              if (input.substr(peg$currPos, 3) === peg$c13) {
	                s5 = peg$c13;
	                peg$currPos += 3;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c14); }
	              }
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c66(s3);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 94) {
	          s1 = peg$c67;
	          peg$currPos++;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c68); }
	        }
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parsetype();
	          if (s2 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c69(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          s1 = peg$parseidentifier();
	          if (s1 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c70(s1);
	          }
	          s0 = s1;
	        }
	      }
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c52); }
	    }

	    return s0;
	  }

	  function peg$parsestatement() {
	    var s0;

	    s0 = peg$parsecompound();
	    if (s0 === peg$FAILED) {
	      s0 = peg$parseprocedure_call();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parseassignment();
	        if (s0 === peg$FAILED) {
	          s0 = peg$parseif_stmt();
	          if (s0 === peg$FAILED) {
	            s0 = peg$parsefor();
	            if (s0 === peg$FAILED) {
	              s0 = peg$parsewhile();
	            }
	          }
	        }
	      }
	    }

	    return s0;
	  }

	  function peg$parsecompound() {
	    var s0, s1, s2, s3, s4, s5;

	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 5) === peg$c16) {
	      s1 = peg$c16;
	      peg$currPos += 5;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c17); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parsestatements();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            if (input.substr(peg$currPos, 3) === peg$c13) {
	              s5 = peg$c13;
	              peg$currPos += 3;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c14); }
	            }
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c71(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parseassignment() {
	    var s0, s1, s2, s3, s4, s5;

	    s0 = peg$currPos;
	    s1 = peg$parselvalue();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        if (input.substr(peg$currPos, 2) === peg$c72) {
	          s3 = peg$c72;
	          peg$currPos += 2;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c73); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseexpression();
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c74(s1, s5);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parselvalue() {
	    var s0, s1, s2, s3, s4, s5, s6, s7;

	    s0 = peg$currPos;
	    s1 = peg$parseidentifier();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 91) {
	          s3 = peg$c55;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c56); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseexpression();
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parse_();
	              if (s6 !== peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 93) {
	                  s7 = peg$c59;
	                  peg$currPos++;
	                } else {
	                  s7 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c60); }
	                }
	                if (s7 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c75(s1, s5);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$currPos;
	      s1 = peg$parseidentifier();
	      if (s1 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 46) {
	          s2 = peg$c4;
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c5); }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseidentifier();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c76(s1, s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parseidentifier();
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c77(s1);
	        }
	        s0 = s1;
	      }
	    }

	    return s0;
	  }

	  function peg$parseprocedure_call() {
	    var s0, s1, s2, s3, s4, s5;

	    s0 = peg$currPos;
	    s1 = peg$parseidentifier();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 40) {
	          s3 = peg$c22;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c23); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parseargument_list();
	          if (s4 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 41) {
	              s5 = peg$c24;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c25); }
	            }
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c78(s1, s4);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parseargument_list() {
	    var s0, s1, s2, s3, s4, s5, s6;

	    s0 = peg$currPos;
	    s1 = peg$parseexpression();
	    if (s1 === peg$FAILED) {
	      s1 = null;
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = [];
	      s3 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 44) {
	        s4 = peg$c35;
	        peg$currPos++;
	      } else {
	        s4 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c36); }
	      }
	      if (s4 !== peg$FAILED) {
	        s5 = peg$parse_();
	        if (s5 !== peg$FAILED) {
	          s6 = peg$parseexpression();
	          if (s6 !== peg$FAILED) {
	            s4 = [s4, s5, s6];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s3;
	        s3 = peg$FAILED;
	      }
	      while (s3 !== peg$FAILED) {
	        s2.push(s3);
	        s3 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 44) {
	          s4 = peg$c35;
	          peg$currPos++;
	        } else {
	          s4 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c36); }
	        }
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parse_();
	          if (s5 !== peg$FAILED) {
	            s6 = peg$parseexpression();
	            if (s6 !== peg$FAILED) {
	              s4 = [s4, s5, s6];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	      }
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c79(s1, s2);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parseif_stmt() {
	    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 2) === peg$c80) {
	      s1 = peg$c80;
	      peg$currPos += 2;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c81); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseexpression();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            if (input.substr(peg$currPos, 4) === peg$c82) {
	              s5 = peg$c82;
	              peg$currPos += 4;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c83); }
	            }
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parse_();
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parsestatement();
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parse_();
	                  if (s8 !== peg$FAILED) {
	                    if (input.substr(peg$currPos, 4) === peg$c84) {
	                      s9 = peg$c84;
	                      peg$currPos += 4;
	                    } else {
	                      s9 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c85); }
	                    }
	                    if (s9 !== peg$FAILED) {
	                      s10 = peg$parse_();
	                      if (s10 !== peg$FAILED) {
	                        s11 = peg$parsestatement();
	                        if (s11 !== peg$FAILED) {
	                          peg$savedPos = s0;
	                          s1 = peg$c86(s3, s7, s11);
	                          s0 = s1;
	                        } else {
	                          peg$currPos = s0;
	                          s0 = peg$FAILED;
	                        }
	                      } else {
	                        peg$currPos = s0;
	                        s0 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsefor() {
	    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 3) === peg$c87) {
	      s1 = peg$c87;
	      peg$currPos += 3;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c88); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseidentifier();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            if (input.substr(peg$currPos, 2) === peg$c72) {
	              s5 = peg$c72;
	              peg$currPos += 2;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c73); }
	            }
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parse_();
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parseexpression();
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parse_();
	                  if (s8 !== peg$FAILED) {
	                    if (input.substr(peg$currPos, 2) === peg$c89) {
	                      s9 = peg$c89;
	                      peg$currPos += 2;
	                    } else {
	                      s9 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c90); }
	                    }
	                    if (s9 === peg$FAILED) {
	                      if (input.substr(peg$currPos, 6) === peg$c91) {
	                        s9 = peg$c91;
	                        peg$currPos += 6;
	                      } else {
	                        s9 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c92); }
	                      }
	                    }
	                    if (s9 !== peg$FAILED) {
	                      s10 = peg$parse_();
	                      if (s10 !== peg$FAILED) {
	                        s11 = peg$parseexpression();
	                        if (s11 !== peg$FAILED) {
	                          s12 = peg$parse_();
	                          if (s12 !== peg$FAILED) {
	                            if (input.substr(peg$currPos, 2) === peg$c93) {
	                              s13 = peg$c93;
	                              peg$currPos += 2;
	                            } else {
	                              s13 = peg$FAILED;
	                              if (peg$silentFails === 0) { peg$fail(peg$c94); }
	                            }
	                            if (s13 !== peg$FAILED) {
	                              s14 = peg$parse_();
	                              if (s14 !== peg$FAILED) {
	                                s15 = peg$parsestatement();
	                                if (s15 !== peg$FAILED) {
	                                  peg$savedPos = s0;
	                                  s1 = peg$c95(s3, s7, s9, s11, s15);
	                                  s0 = s1;
	                                } else {
	                                  peg$currPos = s0;
	                                  s0 = peg$FAILED;
	                                }
	                              } else {
	                                peg$currPos = s0;
	                                s0 = peg$FAILED;
	                              }
	                            } else {
	                              peg$currPos = s0;
	                              s0 = peg$FAILED;
	                            }
	                          } else {
	                            peg$currPos = s0;
	                            s0 = peg$FAILED;
	                          }
	                        } else {
	                          peg$currPos = s0;
	                          s0 = peg$FAILED;
	                        }
	                      } else {
	                        peg$currPos = s0;
	                        s0 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsewhile() {
	    var s0, s1, s2, s3, s4, s5, s6, s7;

	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 5) === peg$c96) {
	      s1 = peg$c96;
	      peg$currPos += 5;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c97); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseexpression();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            if (input.substr(peg$currPos, 2) === peg$c93) {
	              s5 = peg$c93;
	              peg$currPos += 2;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c94); }
	            }
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parse_();
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parsestatement();
	                if (s7 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c98(s3, s7);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsefunction_call() {
	    var s0, s1, s2, s3, s4, s5;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    s1 = peg$parseidentifier();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 40) {
	          s3 = peg$c22;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c23); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parseargument_list();
	          if (s4 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 41) {
	              s5 = peg$c24;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c25); }
	            }
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c100(s1, s4);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c99); }
	    }

	    return s0;
	  }

	  function peg$parseexpression() {
	    var s0, s1;

	    peg$silentFails++;
	    s0 = peg$parsecomparision();
	    if (s0 === peg$FAILED) {
	      s0 = peg$parseor_expr();
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c101); }
	    }

	    return s0;
	  }

	  function peg$parsecomparision() {
	    var s0, s1, s2, s3, s4, s5;

	    s0 = peg$currPos;
	    s1 = peg$parseor_expr();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 61) {
	          s3 = peg$c41;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c42); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseor_expr();
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c102(s1, s5);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$currPos;
	      s1 = peg$parseor_expr();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          if (input.substr(peg$currPos, 2) === peg$c103) {
	            s3 = peg$c103;
	            peg$currPos += 2;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c104); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseor_expr();
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c105(s1, s5);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parseor_expr();
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parse_();
	          if (s2 !== peg$FAILED) {
	            if (input.substr(peg$currPos, 2) === peg$c106) {
	              s3 = peg$c106;
	              peg$currPos += 2;
	            } else {
	              s3 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c107); }
	            }
	            if (s3 !== peg$FAILED) {
	              s4 = peg$parse_();
	              if (s4 !== peg$FAILED) {
	                s5 = peg$parseor_expr();
	                if (s5 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c108(s1, s5);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          s1 = peg$parseor_expr();
	          if (s1 !== peg$FAILED) {
	            s2 = peg$parse_();
	            if (s2 !== peg$FAILED) {
	              if (input.substr(peg$currPos, 2) === peg$c109) {
	                s3 = peg$c109;
	                peg$currPos += 2;
	              } else {
	                s3 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c110); }
	              }
	              if (s3 !== peg$FAILED) {
	                s4 = peg$parse_();
	                if (s4 !== peg$FAILED) {
	                  s5 = peg$parseor_expr();
	                  if (s5 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c111(s1, s5);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	          if (s0 === peg$FAILED) {
	            s0 = peg$currPos;
	            s1 = peg$parseor_expr();
	            if (s1 !== peg$FAILED) {
	              s2 = peg$parse_();
	              if (s2 !== peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 62) {
	                  s3 = peg$c112;
	                  peg$currPos++;
	                } else {
	                  s3 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c113); }
	                }
	                if (s3 !== peg$FAILED) {
	                  s4 = peg$parse_();
	                  if (s4 !== peg$FAILED) {
	                    s5 = peg$parseor_expr();
	                    if (s5 !== peg$FAILED) {
	                      peg$savedPos = s0;
	                      s1 = peg$c114(s1, s5);
	                      s0 = s1;
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              s1 = peg$parseor_expr();
	              if (s1 !== peg$FAILED) {
	                s2 = peg$parse_();
	                if (s2 !== peg$FAILED) {
	                  if (input.charCodeAt(peg$currPos) === 60) {
	                    s3 = peg$c115;
	                    peg$currPos++;
	                  } else {
	                    s3 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c116); }
	                  }
	                  if (s3 !== peg$FAILED) {
	                    s4 = peg$parse_();
	                    if (s4 !== peg$FAILED) {
	                      s5 = peg$parseor_expr();
	                      if (s5 !== peg$FAILED) {
	                        peg$savedPos = s0;
	                        s1 = peg$c117(s1, s5);
	                        s0 = s1;
	                      } else {
	                        peg$currPos = s0;
	                        s0 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            }
	          }
	        }
	      }
	    }

	    return s0;
	  }

	  function peg$parseor_expr() {
	    var s0, s1, s2, s3, s4, s5, s6, s7;

	    s0 = peg$currPos;
	    s1 = peg$parseand_expr();
	    if (s1 !== peg$FAILED) {
	      s2 = [];
	      s3 = peg$currPos;
	      s4 = peg$parse_();
	      if (s4 !== peg$FAILED) {
	        if (input.substr(peg$currPos, 2) === peg$c118) {
	          s5 = peg$c118;
	          peg$currPos += 2;
	        } else {
	          s5 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c119); }
	        }
	        if (s5 === peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 43) {
	            s5 = peg$c120;
	            peg$currPos++;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c121); }
	          }
	          if (s5 === peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 45) {
	              s5 = peg$c122;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c123); }
	            }
	          }
	        }
	        if (s5 !== peg$FAILED) {
	          s6 = peg$parse_();
	          if (s6 !== peg$FAILED) {
	            s7 = peg$parseand_expr();
	            if (s7 !== peg$FAILED) {
	              s4 = [s4, s5, s6, s7];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s3;
	        s3 = peg$FAILED;
	      }
	      while (s3 !== peg$FAILED) {
	        s2.push(s3);
	        s3 = peg$currPos;
	        s4 = peg$parse_();
	        if (s4 !== peg$FAILED) {
	          if (input.substr(peg$currPos, 2) === peg$c118) {
	            s5 = peg$c118;
	            peg$currPos += 2;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c119); }
	          }
	          if (s5 === peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 43) {
	              s5 = peg$c120;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c121); }
	            }
	            if (s5 === peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 45) {
	                s5 = peg$c122;
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c123); }
	              }
	            }
	          }
	          if (s5 !== peg$FAILED) {
	            s6 = peg$parse_();
	            if (s6 !== peg$FAILED) {
	              s7 = peg$parseand_expr();
	              if (s7 !== peg$FAILED) {
	                s4 = [s4, s5, s6, s7];
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	      }
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c124(s1, s2);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parseand_expr() {
	    var s0, s1, s2, s3, s4, s5, s6, s7;

	    s0 = peg$currPos;
	    s1 = peg$parsebase_expr();
	    if (s1 !== peg$FAILED) {
	      s2 = [];
	      s3 = peg$currPos;
	      s4 = peg$parse_();
	      if (s4 !== peg$FAILED) {
	        if (input.substr(peg$currPos, 3) === peg$c125) {
	          s5 = peg$c125;
	          peg$currPos += 3;
	        } else {
	          s5 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c126); }
	        }
	        if (s5 === peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 42) {
	            s5 = peg$c127;
	            peg$currPos++;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c128); }
	          }
	          if (s5 === peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 47) {
	              s5 = peg$c129;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c130); }
	            }
	            if (s5 === peg$FAILED) {
	              if (input.substr(peg$currPos, 3) === peg$c131) {
	                s5 = peg$c131;
	                peg$currPos += 3;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c132); }
	              }
	              if (s5 === peg$FAILED) {
	                if (input.substr(peg$currPos, 3) === peg$c133) {
	                  s5 = peg$c133;
	                  peg$currPos += 3;
	                } else {
	                  s5 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c134); }
	                }
	              }
	            }
	          }
	        }
	        if (s5 !== peg$FAILED) {
	          s6 = peg$parse_();
	          if (s6 !== peg$FAILED) {
	            s7 = peg$parsebase_expr();
	            if (s7 !== peg$FAILED) {
	              s4 = [s4, s5, s6, s7];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s3;
	        s3 = peg$FAILED;
	      }
	      while (s3 !== peg$FAILED) {
	        s2.push(s3);
	        s3 = peg$currPos;
	        s4 = peg$parse_();
	        if (s4 !== peg$FAILED) {
	          if (input.substr(peg$currPos, 3) === peg$c125) {
	            s5 = peg$c125;
	            peg$currPos += 3;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c126); }
	          }
	          if (s5 === peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 42) {
	              s5 = peg$c127;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c128); }
	            }
	            if (s5 === peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 47) {
	                s5 = peg$c129;
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c130); }
	              }
	              if (s5 === peg$FAILED) {
	                if (input.substr(peg$currPos, 3) === peg$c131) {
	                  s5 = peg$c131;
	                  peg$currPos += 3;
	                } else {
	                  s5 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c132); }
	                }
	                if (s5 === peg$FAILED) {
	                  if (input.substr(peg$currPos, 3) === peg$c133) {
	                    s5 = peg$c133;
	                    peg$currPos += 3;
	                  } else {
	                    s5 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c134); }
	                  }
	                }
	              }
	            }
	          }
	          if (s5 !== peg$FAILED) {
	            s6 = peg$parse_();
	            if (s6 !== peg$FAILED) {
	              s7 = peg$parsebase_expr();
	              if (s7 !== peg$FAILED) {
	                s4 = [s4, s5, s6, s7];
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	      }
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c135(s1, s2);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsebase_expr() {
	    var s0, s1, s2, s3, s4, s5;

	    s0 = peg$parseprimary();
	    if (s0 === peg$FAILED) {
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 40) {
	        s1 = peg$c22;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c23); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseexpression();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 41) {
	                s5 = peg$c24;
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c25); }
	              }
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c136();
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    }

	    return s0;
	  }

	  function peg$parseprimary() {
	    var s0;

	    s0 = peg$parsefunction_call();
	    if (s0 === peg$FAILED) {
	      s0 = peg$parsepointer_to();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsederef();
	        if (s0 === peg$FAILED) {
	          s0 = peg$parsearray_access();
	          if (s0 === peg$FAILED) {
	            s0 = peg$parserecord_access();
	            if (s0 === peg$FAILED) {
	              s0 = peg$parseliteral();
	              if (s0 === peg$FAILED) {
	                s0 = peg$parsevariable();
	              }
	            }
	          }
	        }
	      }
	    }

	    return s0;
	  }

	  function peg$parsepointer_to() {
	    var s0, s1, s2;

	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 64) {
	      s1 = peg$c137;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c138); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parseidentifier();
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c139(s2);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsederef() {
	    var s0, s1, s2;

	    s0 = peg$currPos;
	    s1 = peg$parseidentifier();
	    if (s1 !== peg$FAILED) {
	      if (input.charCodeAt(peg$currPos) === 94) {
	        s2 = peg$c67;
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c68); }
	      }
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c140(s1);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsearray_access() {
	    var s0, s1, s2, s3, s4, s5, s6, s7;

	    s0 = peg$currPos;
	    s1 = peg$parsevariable();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 91) {
	          s3 = peg$c55;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c56); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseexpression();
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parse_();
	              if (s6 !== peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 93) {
	                  s7 = peg$c59;
	                  peg$currPos++;
	                } else {
	                  s7 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c60); }
	                }
	                if (s7 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c136();
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parserecord_access() {
	    var s0, s1, s2, s3;

	    s0 = peg$currPos;
	    s1 = peg$parsevariable();
	    if (s1 !== peg$FAILED) {
	      if (input.charCodeAt(peg$currPos) === 46) {
	        s2 = peg$c4;
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c5); }
	      }
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseidentifier();
	        if (s3 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c136();
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsevariable() {
	    var s0, s1;

	    peg$silentFails++;
	    s0 = peg$parseidentifier();
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c141); }
	    }

	    return s0;
	  }

	  function peg$parseidentifier() {
	    var s0, s1, s2, s3;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    if (peg$c143.test(input.charAt(peg$currPos))) {
	      s1 = input.charAt(peg$currPos);
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c144); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = [];
	      if (peg$c145.test(input.charAt(peg$currPos))) {
	        s3 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s3 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c146); }
	      }
	      while (s3 !== peg$FAILED) {
	        s2.push(s3);
	        if (peg$c145.test(input.charAt(peg$currPos))) {
	          s3 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c146); }
	        }
	      }
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c136();
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c142); }
	    }

	    return s0;
	  }

	  function peg$parseliteral() {
	    var s0, s1;

	    peg$silentFails++;
	    s0 = peg$parsestring_literal();
	    if (s0 === peg$FAILED) {
	      s0 = peg$parseboolean_literal();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsereal_literal();
	        if (s0 === peg$FAILED) {
	          s0 = peg$parseinteger_literal();
	        }
	      }
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c147); }
	    }

	    return s0;
	  }

	  function peg$parsestring_literal() {
	    var s0, s1, s2, s3;

	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 39) {
	      s1 = peg$c148;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c149); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = [];
	      s3 = peg$parsestring_character();
	      while (s3 !== peg$FAILED) {
	        s2.push(s3);
	        s3 = peg$parsestring_character();
	      }
	      if (s2 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 39) {
	          s3 = peg$c148;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c149); }
	        }
	        if (s3 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c136();
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsestring_character() {
	    var s0, s1, s2;

	    s0 = peg$currPos;
	    s1 = peg$currPos;
	    peg$silentFails++;
	    if (input.charCodeAt(peg$currPos) === 39) {
	      s2 = peg$c148;
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c149); }
	    }
	    peg$silentFails--;
	    if (s2 === peg$FAILED) {
	      s1 = void 0;
	    } else {
	      peg$currPos = s1;
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      if (input.length > peg$currPos) {
	        s2 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c150); }
	      }
	      if (s2 !== peg$FAILED) {
	        s1 = [s1, s2];
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parseboolean_literal() {
	    var s0;

	    if (input.substr(peg$currPos, 4) === peg$c151) {
	      s0 = peg$c151;
	      peg$currPos += 4;
	    } else {
	      s0 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c152); }
	    }
	    if (s0 === peg$FAILED) {
	      if (input.substr(peg$currPos, 5) === peg$c153) {
	        s0 = peg$c153;
	        peg$currPos += 5;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c154); }
	      }
	    }

	    return s0;
	  }

	  function peg$parseinteger_literal() {
	    var s0, s1, s2;

	    s0 = peg$currPos;
	    s1 = [];
	    if (peg$c155.test(input.charAt(peg$currPos))) {
	      s2 = input.charAt(peg$currPos);
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c156); }
	    }
	    if (s2 !== peg$FAILED) {
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        if (peg$c155.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c156); }
	        }
	      }
	    } else {
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c136();
	    }
	    s0 = s1;

	    return s0;
	  }

	  function peg$parsereal_literal() {
	    var s0, s1, s2, s3, s4;

	    s0 = peg$currPos;
	    s1 = [];
	    if (peg$c155.test(input.charAt(peg$currPos))) {
	      s2 = input.charAt(peg$currPos);
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c156); }
	    }
	    if (s2 !== peg$FAILED) {
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        if (peg$c155.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c156); }
	        }
	      }
	    } else {
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      if (input.charCodeAt(peg$currPos) === 46) {
	        s2 = peg$c4;
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c5); }
	      }
	      if (s2 !== peg$FAILED) {
	        s3 = [];
	        if (peg$c155.test(input.charAt(peg$currPos))) {
	          s4 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s4 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c156); }
	        }
	        if (s4 !== peg$FAILED) {
	          while (s4 !== peg$FAILED) {
	            s3.push(s4);
	            if (peg$c155.test(input.charAt(peg$currPos))) {
	              s4 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s4 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c156); }
	            }
	          }
	        } else {
	          s3 = peg$FAILED;
	        }
	        if (s3 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c157();
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsecomment() {
	    var s0, s1, s2, s3;

	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 123) {
	      s1 = peg$c158;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c159); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = [];
	      s3 = peg$parsecomment_character();
	      while (s3 !== peg$FAILED) {
	        s2.push(s3);
	        s3 = peg$parsecomment_character();
	      }
	      if (s2 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 125) {
	          s3 = peg$c160;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c161); }
	        }
	        if (s3 !== peg$FAILED) {
	          s1 = [s1, s2, s3];
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsecomment_character() {
	    var s0, s1, s2;

	    s0 = peg$currPos;
	    s1 = peg$currPos;
	    peg$silentFails++;
	    if (input.charCodeAt(peg$currPos) === 125) {
	      s2 = peg$c160;
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c161); }
	    }
	    peg$silentFails--;
	    if (s2 === peg$FAILED) {
	      s1 = void 0;
	    } else {
	      peg$currPos = s1;
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      if (input.length > peg$currPos) {
	        s2 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c150); }
	      }
	      if (s2 !== peg$FAILED) {
	        s1 = [s1, s2];
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parse_() {
	    var s0, s1, s2;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    s1 = [];
	    s2 = peg$parsecomment();
	    if (s2 === peg$FAILED) {
	      if (peg$c163.test(input.charAt(peg$currPos))) {
	        s2 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c164); }
	      }
	    }
	    while (s2 !== peg$FAILED) {
	      s1.push(s2);
	      s2 = peg$parsecomment();
	      if (s2 === peg$FAILED) {
	        if (peg$c163.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c164); }
	        }
	      }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c165();
	    }
	    s0 = s1;
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c162); }
	    }

	    return s0;
	  }


	    // --- Utils -------
	    function to_str(x) {
	        return x.join('');
	    }
	    function nth(arr, n) {
	        var results = [];
	        for (var i = 0; i < arr.length; i++) {
	            results.push(arr[i][n]);
	        }
	        return results;
	    }
	    function buildList(first, rest, n, joiner, join_translation) {
	      var results = first ? [first] : [];
	      for (var i = 0; i < rest.length; i++) {
	        if (joiner) {
	          var j = rest[i][joiner];
	          if (j in join_translation) {
	            results.push(join_translation[j]);
	          } else {
	            results.push(j);
	          }
	        }
	        results.push(rest[i][n]);
	      }
	      return results.join(' ');
	    }
	    function flatten(arrays) {
	      return Array.prototype.concat.apply([], arrays);
	    }
	    function createBuiltins() {
	      function createBuiltin(name) {
	          return {'kind': 'builtin', 'name': name}
	      }
	      return {
	        'String': createBuiltin('string'), 
	        'Boolean': createBuiltin('boolean'),
	        'Real': createBuiltin('real'),
	        'Integer': createBuiltin('integer'),
	        'Byte': createBuiltin('byte'),
	        'Word': createBuiltin('word')};
	    }
	    var types = createBuiltins();

	    function createAlias(alias, type) {
	      types[alias] = type;
	    }
	    function findType(type_name) {
	      if (type_name in types) {
	        return types[type_name];
	      }
	      error('Unknown type "' + type_name + '"');
	    }


	  peg$result = peg$startRuleFunction();

	  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
	    return peg$result;
	  } else {
	    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
	      peg$fail(peg$endExpectation());
	    }

	    throw peg$buildStructuredError(
	      peg$maxFailExpected,
	      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
	      peg$maxFailPos < input.length
	        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
	        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
	    );
	  }
	}

	module.exports = {
	  SyntaxError: peg$SyntaxError,
	  parse:       peg$parse
	};


/***/ }),
/* 3 */
/***/ (function(module, exports) {

	// Emits js from pascal ast    

	function Emitter(emit_raw) {
	  this.emit_raw = emit_raw || console.log;
	  
	  this.emit_statement = function(stmt) {
	    switch (stmt.statement) {
	      case 'compound':
	        this.emit_raw('{');
	        this.emit_statements(stmt.statements);
	        this.emit_raw('}');
	        break;
	      case 'call':
	        this.emit_raw(stmt.target + '(' + stmt.arguments.join(', ') + ');');
	        break;
	      case 'assignment':
	        if (stmt.to.indexer) {
	          this.emit_raw(stmt.to.variable + "[" + stmt.to.indexer + "]" + ' = '  + stmt.from + ";");
	        } else if (stmt.to.member) {
	          this.emit_raw(stmt.to.variable + "." + stmt.to.member + ' = '  + stmt.from + ";");
	        } else {
	          this.emit_raw(stmt.to.variable + ' = '  + stmt.from + ";");
	        }
	        break;
	      case 'for':
	        var update = stmt.direction == "to" ? (stmt.variable+'++') : (stmt.variable+'--');
	        var stop_criterion = stmt.direction == "to" ? (stmt.variable + '<=' + stmt.stop ) : (stmt.variable+'>='+stmt.stop);
	        this.emit_raw('for (' + stmt.variable + '=' + stmt.start + '; ' + stop_criterion + '; ' + update + ') {');
	        this.emit_statement(stmt.do);
	        this.emit_raw('}');
	        break;
	      case 'while':
	        this.emit_raw('while (' + stmt.condition + ")");
	        this.emit_statement(stmt.do);
	        break;
	      case 'if':
	        this.emit_raw('if (' + stmt.condition + ')');
	        this.emit_statement(stmt.then);
	        this.emit_raw('else');
	        this.emit_statement(stmt.else);
	        break;
	      default:
	        throw "Unknown statement: " + stmt.statement;
	    }
	  }

	  this.emit_statements = function(statements) {
	    for (var i = 0; i < statements.length; i++)
	    {
	      this.emit_statement(statements[i]);
	    }
	  }

	  this.argument_list = function(ast_arguments) {
	    return ast_arguments.map(function (arg) { return arg.name; }).join(', ');
	  }

	  this.initializer_for = function(type) {
	    if (type.kind == 'array') {
	      return '[]';
	    }
	    if (type.kind == 'record') {
	      return '{}';
	    }
	    return 'null';
	  }

	  this.emit_constants = function(constants) {
	    var c = constants;
	    if (c) {
	      for (var i = 0; i < c.length; i++)
	      {
	        this.emit_raw('const ' + c[i].name + ' = ' + c[i].value + ';');
	      }
	    }
	  }

	  this.emit_variables = function(variables)
	  {
	    var v = variables;
	    if (v) {
	      for (var i = 0; i < v.length; i++)
	      {
	        var initializer = this.initializer_for(v[i].type);
	        this.emit_raw("var " + v[i].name + " = " + initializer + ";" + " // " + v[i].type.name);
	      }
	    }
	  }

	  this.emit_procedure = function(p) {
	    this.emit_raw("function " + p.procedure + "(" + this.argument_list(p.arguments) + ") {");
	    this.emit_node(p.block);
	    this.emit_raw("}");
	  }

	  this.emit_function = function(f) {
	    this.emit_raw("function " + f.function + "(" + this.argument_list(f.arguments) + ") {");

	    this.emit_raw('var ' + f.function + ";" + " // returns " + f.return_type.name);
	    this.emit_node(f.block);
	    this.emit_raw('return ' + f.function + ";");

	    this.emit_raw("}");
	  }

	  this.emit_procedures = function(procedures) {
	    var p = procedures;
	    if (p) {
	      for (var i = 0; i < p.length; i++)
	      {
	        this.emit_procedure(p[i]);
	      }
	    }
	  }

	  this.emit_declarations = function(declarations) {
	    //emit_raw('// ' + JSON.stringify(node.declarations));
	    for (var i = 0; i < declarations.length; i++) {
	      var d = declarations[i];
	      if (d.procedure) {
	        this.emit_procedure(d);
	      }
	      if (d.function) {
	        this.emit_function(d);
	      }
	      if (d.constants) {
	        this.emit_constants(d.constants);
	      }
	      if (d.vars) {
	        this.emit_variables(d.vars);
	      }
	    }
	  }

	  this.emit_node = function(node) {
	    this.emit_declarations(node.declarations);
	    this.emit_statements(node.statements);
	  }

	  this.emit_notice = function() {
	    this.emit_raw("// Genrated by pascaljs. https://github.com/vidstige/pascaljs");
	  }

	  this.emit = function(ast) {
	    if (ast.program) {
	      // emit std unit
	      this.emit_notice();
	      this.emit_raw("function WriteLn() { var args = Array.prototype.slice.call(arguments); console.log(args.join('')); }")

	      this.emit_node(ast.program);
	    } else if (ast.unit) {
	      this.emit_notice();
	      
	      this.emit_declarations(ast.unit.interface);
	      this.emit_declarations(ast.unit.implementation);

	      // TODO: Export interface functions, constants, and vars
	      // TODO: ...and double check functions are also in implementation

	    } else {
	      throw "Unknown AST: " + ast;
	    }
	  }
	}

	module.exports = {
	  Emitter: Emitter
	};


/***/ })
/******/ ]);